/* 
 * Copyright 2018 University of Toronto
 *
 * Permission is hereby granted, to use this software and associated 
 * documentation files (the "Software") in course work at the University 
 * of Toronto, or for personal use. Other uses are prohibited, in 
 * particular the distribution of the Software either publicly or to third 
 * parties.
 *
 * The above copyright notice and this permission notice shall be included in 
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE 
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER 
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
#include <iostream>
#include <string>
#include <StreetsDatabaseAPI.h>
#include "m1.h"
#include <vector>
#include <algorithm>
#include <math.h>


using namespace std;
//Program exit codes
constexpr int SUCCESS_EXIT_CODE = 0;        //Everyting went OK
constexpr int ERROR_EXIT_CODE = 1;          //An error occured
constexpr int BAD_ARGUMENTS_EXIT_CODE = 2;  //Invalid command-line usage

//The default map to load if none is specified
std::string default_map_path = "/cad2/ece297s/public/maps/toronto_canada.streets.bin";

int main(int argc, char** argv) {

    std::string map_path;
    if(argc == 1) {
        //Use a default map
        map_path = default_map_path;
    } else if (argc == 2) {
        //Get the map from the command line
        map_path = argv[1];
    } else {
        //Invalid arguments
        std::cerr << "Usage: " << argv[0] << " [map_file_path]\n";
        std::cerr << "  If no map_file_path is provided a default map is loaded.\n";
        return BAD_ARGUMENTS_EXIT_CODE;
    }
  
    //Load the map and related data structures
    bool load_success = load_map(map_path);
    if(!load_success) {
        std::cerr << "Failed to load map '" << map_path << endl;
        return ERROR_EXIT_CODE;
    }

    std::cout << "Successfully loaded map '" << map_path << endl;

    //You can now do something with the map data
    
    unsigned actual = find_closest_intersection(LatLon(43.7193603515625, -79.52051544189453));
    cout<< actual<< endl;
     
        //below are testing code which should be used  in test main
    
//    cout << "This is a test using intersection ID 7" <<endl;
//    string intersection_name = getIntersectionName(7);
//    cout << "Intersection name is " << intersection_name << endl;
//    std::vector<unsigned> test = find_intersection_street_segments(7);
//    cout << "the following ID are the street segment ID that this intersection connected"<<endl;
//    
//    for(int i = 0; i < test.size(); i++){
//        cout << " " << test[i] << endl;
//    }
//    cout << endl;
//    
//    for(int j = 0; j < test.size();j++){
//        cout << "for Street segment ID " << test[j] << ", it";
//        StreetSegmentInfo testInfo = getStreetSegmentInfo(test[j]);
//        cout << " from intersection "<< testInfo.from <<" to intersection " << testInfo.to << endl;
//    }
//    
//    
//    
//    
//        vector<unsigned>expected = {4, 136438};
//        cout <<" expected is"<< endl;
//    for(int j = 0; j < expected.size();j++){
//        cout << "for Street segment ID " << expected[j] << ", it";
//        StreetSegmentInfo testInfo = getStreetSegmentInfo(expected[j]);
//        cout << " from intersection "<< testInfo.from <<" to intersection " << testInfo.to << endl;
//    }
//        
//        cout<<endl;
//        
//        
//        vector<unsigned>actual = find_intersection_street_segments(7);
//        std::sort(actual.begin(), actual.end());
//        cout << " actual is "<<endl;
//        
//    for(int j = 0; j < actual.size();j++){
//        cout << "for Street segment ID " << actual[j] << ", it";
//        StreetSegmentInfo testInfo = getStreetSegmentInfo(actual[j]);
//        cout << " from intersection "<< testInfo.from <<" to intersection " << testInfo.to << endl;
//    }
//    
//    
//    
    //below are testing code which should be used  in test main
//    vector<unsigned>street1InterList;
//    vector<unsigned>street2InterList;
//    vector<unsigned>commonInterList;
//    for(unsigned i =0 ; i < 10 ;i++){
//        street1InterList.push_back(i);
//    }
//    for(unsigned i =5 ; i < 100 ;i++){
//        street2InterList.push_back(i);
//    }
//    
//    
//    sort(street1InterList.begin(), street1InterList.end());
//    sort(street2InterList.begin(), street2InterList.end());
//    
//    std::set_intersection(street1InterList.begin(), street1InterList.end(), 
//    street2InterList.begin(), street2InterList.end(), 
//    back_inserter(commonInterList));
//    for(unsigned i =0 ; i < commonInterList.size() ;i++){
//        cout << "common are " << commonInterList[i] << endl;
//    }
    
    
    
    //below are testing code which should be used  in test main
//    string name= getStreetName(160);
//    cout << "street name   is  "<< name << endl;
//    
//    std::vector<unsigned> test;
//    test =  find_street_ids_from_name(name);
//    for(int i = 0; i < test.size(); i++){
//        cout << " " << test[i] << endl;
//    }
//    
//    cout << getStreetName(1) << endl;
    


    
    
    vector<unsigned> street1IDList = find_street_ids_from_name("Woodside Avenue");
    vector<unsigned> street2IDList = find_street_ids_from_name("Fairview Avenue");
    for(int i = 0; i < street1IDList.size(); i++){
        cout << street1IDList[i] << endl;
    }
    cout << endl;
    for(int i = 0; i < street2IDList.size(); i++){
        cout << street2IDList[i] << endl;
    }
    
    
    cout << "3791 " << getStreetName(3791) << endl; 
    cout << "9048 " << getStreetName(9048)<<endl;
    cout << "9690 "  <<getStreetName(9690)<<endl;
    cout << "17339 " << getStreetName(17339)<<endl;
    cout << endl;
    
    cout << endl;
    vector<string> streetNameList = find_intersection_street_names(15813);
    cout << " This is a test for finding street name around an intersection:  " << endl;
    for(int i = 0; i < streetNameList.size(); i++){
        cout << streetNameList[i] << endl;
    }
    cout << endl;
    
     cout << endl;
    streetNameList = find_intersection_street_names(15812);
    cout << " This is a test for finding street name around an intersection:  " << endl;
    for(int i = 0; i < streetNameList.size(); i++){
        cout << streetNameList[i] << endl;
    }
    cout << endl;
    
    cout << endl;
    streetNameList = find_intersection_street_names(15807);
    cout << " This is a test for finding street name around an intersection:  " << endl;
    for(int i = 0; i < streetNameList.size(); i++){
        cout << streetNameList[i] << endl;
    }
    cout << endl;
            
    cout << endl;
    streetNameList = find_intersection_street_names(15806);
    cout << " This is a test for finding street name around an intersection:  " << endl;
    for(int i = 0; i < streetNameList.size(); i++){
        cout << streetNameList[i] << endl;
    }
    cout << endl;
            
            
    //Clean-up the map data and related data structures
    close_map(); 

    return SUCCESS_EXIT_CODE;
}
