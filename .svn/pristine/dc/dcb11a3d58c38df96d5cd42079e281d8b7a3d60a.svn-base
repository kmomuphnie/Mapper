/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/* 
 * File:   map_data.h
 * Author: wangha78
 *
 * Created on January 31, 2018, 3:44 PM
 */

#ifndef MAP_DATA_H
#define MAP_DATA_H
#include <string>
#include <vector>
#include <map>
#include <unordered_map>
#include <algorithm>
#include <math.h>
#include <iostream>
#include <StreetsDatabaseAPI.h>
#include "m1.h"

//new include libraries for r tree
#include <boost/geometry.hpp>
#include <boost/geometry/geometries/point.hpp>
#include <boost/geometry/geometries/box.hpp>
#include <boost/geometry/index/rtree.hpp>
#include <boost/foreach.hpp>

namespace bg = boost::geometry;
namespace bgi = boost::geometry::index;
typedef bg::model::point<double, 2, bg::cs::spherical_equatorial<bg::degree>> point;
typedef std::pair<point, unsigned> value;

using namespace std;
class map_data{
    private:
        unsigned streetnameIDNum=0;
        std::unordered_map<std::string,std::vector<unsigned> > streetString_streetIDs;
        //later would be used//std::map<std::string,unsigned> streetnameID;
        std::vector<std::vector<unsigned> > street_segments;
        std::vector<std::vector<unsigned> > intersection_street_segments;
        std::vector<std::vector<unsigned> > street_intersections;
        std::vector<std::vector<unsigned> > streetnameID_streetID;
        std::vector<double> segmentID_segmentlength;
        std::vector<double> streetID_streetlength;
        std::vector<double> segmentID_traveltime;
        
        
        
    public:
        //new public variables
        bgi::rtree<value, bgi::linear<32>> intersectionRtree;
        bgi::rtree<value, bgi::linear<32>> interestRtree; 
        std::vector<unsigned> get_all_segments_streetID (unsigned inputstreetID)  const;
        std::vector<unsigned> get_all_segments_from_intersectionID (unsigned inputintersectionID) const;
        std::vector<unsigned> get_all_intersections_streetID (unsigned inputstreetID)  const;
        std::vector<unsigned> get_all_streetID_streetString (std::string inputstreetString) const;
        double get_segmentlength_segmentID (unsigned inputsegmentID ) const;
        double get_streetlength_streetID (unsigned inputstreetID ) const;
        double get_traveltime_segmentID (unsigned inputsegmentID ) const;
        map_data();
        point LatLontoPoint(LatLon source) const;
        unsigned nearestIntersection(LatLon my_position) const;
        unsigned nearestInterest(LatLon my_position) const; 
};
#endif /* MAP_DATA_H */
